.MODEL SMALL    
.STACK 100H     
                
.DATA           
_a DW ?         
_b DW ?         
__S0 DB "Enter value for a: ", "$" 
__S1 DB "Enter value for b: ", "$" 
__S2 DB "a is: ", "$" 
__S3 DB "b is: ", "$" 
__S4 DB "a + b = ", "$" 
__S5 DB "a - b = ", "$" 
__S6 DB "a * b = ", "$" 
__S7 DB "a && b = ", "$" 
__S8 DB "a || b = ", "$" 
__S9 DB "!a = ", "$" 
__S10 DB "-a = ", "$" 
__S11 DB "a / b = ", "$" 
__S12 DB "a % b = ", "$" 
                
.CODE           
INCLUDE io.asm  
_addition       PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV AX, _a
                MOV BX, _b
                ADD AX, BX
                MOV [BP-2], AX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_addition       ENDP
                
                
_subtraction    PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV BX, _a
                MOV CX, _b
                SUB BX, CX
                MOV [BP-2], BX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_subtraction    ENDP
                
                
_multiplication PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV AX, _a
                MOV BX, _b
                MUL BX
                MOV [BP-2], AX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_multiplication ENDP
                
                
_logicalAnd     PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV AX, _a
                CMP AX, 0
                JE LOGICAL_AND_0
                MOV AX, _b
                CMP AX, 0
                JE LOGICAL_AND_0
                MOV AX, 1
                JMP END_LOGICAL_AND_0
                LOGICAL_AND_0:
                END_LOGICAL_AND_0:
                MOV [BP-2], AX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_logicalAnd     ENDP
                
                
_logicalOr      PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV AX, _a
                CMP AX, 0
                JNE LOGICAL_OR_0
                MOV AX, _b
                CMP AX, 0
                JNE LOGICAL_OR_0
                JMP END_LOGICAL_OR_0
                LOGICAL_OR_0:
                MOV AX, 1
                END_LOGICAL_OR_0:
                MOV [BP-2], AX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_logicalOr      ENDP
                
                
_logicalNot     PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 0
                
                MOV AX, _a
                CMP AX, 0
                JNE LOGICAL_NOT_0
                MOV AX, 1
                JMP END_LOGICAL_NOT_0
                LOGICAL_NOT_0:
                MOV AX, 0
                END_LOGICAL_NOT_0:
                MOV AX, AX
                
                ADD SP, 0
                POP BP
                RET 0
_logicalNot     ENDP
                
                
_negation       PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 0
                
                MOV AX, _a
                NEG AX
                MOV AX, AX
                
                ADD SP, 0
                POP BP
                RET 0
_negation       ENDP
                
                
_division       PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV DX, 0
                MOV AX, _a
                MOV CX, _b
                DIV CX
                MOV [BP-2], AX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_division       ENDP
                
                
_modulo         PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 2
                
                MOV DX, 0
                MOV AX, _a
                MOV CX, _b
                DIV CX
                MOV [BP-2], DX
                
                MOV AX, [BP-2]
                MOV AX, AX
                
                ADD SP, 2
                POP BP
                RET 0
_modulo         ENDP
                
                
_main           PROC
                PUSH BP
                MOV BP, SP
                SUB SP, 8
                
                MOV DX, OFFSET __S0
                CALL writestr
                
                CALL readint
                MOV _a, BX
                
                MOV DX, OFFSET __S1
                CALL writestr
                
                CALL readint
                MOV _b, BX
                
                MOV AX, 5
                MOV [BP-6], AX
                
                MOV AX, _a
                MOV BX, [BP-6]
                ADD AX, BX
                MOV [BP-4], AX
                
                MOV AX, [BP-4]
                MOV _a, AX
                
                MOV DX, OFFSET __S2
                CALL writestr
                
                MOV AX, _a
                CALL writeint
                
                CALL writeln
                
                MOV DX, OFFSET __S3
                CALL writestr
                
                MOV AX, _b
                CALL writeint
                
                CALL writeln
                
                CALL _addition
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S4
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _subtraction
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S5
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _multiplication
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S6
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _logicalAnd
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S7
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _logicalOr
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S8
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _logicalNot
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S9
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _negation
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S10
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _division
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S11
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                CALL _modulo
                
                MOV AX, AX
                MOV [BP-2], AX
                
                MOV DX, OFFSET __S12
                CALL writestr
                
                MOV AX, [BP-2]
                CALL writeint
                
                CALL writeln
                
                MOV AX, 1
                NEG AX
                MOV [BP-8], AX
                
                MOV AX, [BP-8]
                MOV AX, AX
                
                ADD SP, 8
                POP BP
                RET 0
_main           ENDP
                
                
__STARTPROC     PROC
                MOV AX, @data
                MOV DS, AX
                
                CALL _main
                
                MOV AX, 4C00H
                INT 21H
__STARTPROC     ENDP
END __STARTPROC 
